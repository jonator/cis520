
CIS 520 - Programming Project #1

                   
---- GROUP ----

Jon Ator jator@ksu.edu
Miles McLenon milesmclenon@ksu.edu
Brandon Fisher bmfisher@ksu.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.


                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

A1:
    In timer.c:

    /* stores list of sleeping threads */
    static struct list sleep_list;

    /* semaphore to protect access to sleep_list */
    static struct semaphore sleep_list_sema;

    -----
    In thread.h:

    struct thread
        ...
        int64_t wakeup_tick;       /* Tick value the thread should be woken up on */
        ...
    };



>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.

A2:
    In timer_sleep(), we sema_down(&sleep_list_sema) to protect our 
    sleep_list.  We then use an auxillary function to insert the thread
    into sleep_list in non-decreasing order based on the tick when the 
    thread should wake up.  Next sema_up(&sleep_list_sema), disable 
    interrupts and call thread_block() to put the current thread to sleep.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

A3:
    In timer_interrupt(), we wake threads from a list that has been
    pre-sorted. This ensures that the maximum number of threads checked
    for the need to wakeup is only 1 greater than the number of threads
    ready to wake at current tick. i.e. if no threads are ready, only 1
    thread will be checked.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

A4:
    In timer_sleep() sleep_list can only be modified by one thread at a time due 
    to the protection from sleep_list_sema.  If multiple threads call timer_sleep()
    simultaneously, one will be blocked on the sema_down instruction until the 
    other has inserted itself into the sleep_list.  Interrupts are only disabled
    for the call to thread_block().


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

A5:
    


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?



             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.

In synch.h

struct lock 
  {
    ...
    struct list_elem elem;      /* List_elem used by thread to keep list of all owned locks*/
    int promoted_priority;      /* Stores highest donated priority from waiting thread */
  };

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

