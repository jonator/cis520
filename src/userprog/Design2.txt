		           +--------------------------+
				   |         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Jon Ator
Brandon Fisher
Miles McLenon

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

A1:
	No data structures were added for argument passing.  arguments
	were temporarily placed on the heap before copying into userprogs
	stack.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

A2:
	Argument passing was implemented within the load function called
	shortly after the beginning of a new user process.  First, a helper
	function tokenizes the arguments passed to the program.  This function
	counts the number of arguments by looking at the number of single and
	multi space sections of the string.  Then it allocates space on the 
	heap for char * and char ** that temporarily store all of the arguments.
	The load function then continues and near its end, an additional 
	helper function copies the arguments over from the heap into the new
	userprogs stack in the appropriate order.  
	
	To ensure correct order on the stack, the arguments are placed on the heap 
	in the order they are received, and then iterated in reverse order to be 
	placed on te userprogs stack.  To avoid overflowing the stack above user 
	memory and into kernel memory, we decrement esp by the necessary size prior 
	to copying memory onto the stack.  If there are so many arguments that
	overflow occurs beyond the stack space and into bss, the kernel handles
	stack overflow.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

A3:


>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

A4:


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

B1:
	In Syscall.h
		/*	A struct to keep track of the exit status for a child 
			process that has exited that may have a living parent
			waiting on it.
		*/
		struct process_exit_record
		{
			pid_t child_pid;			/* Child pid */
			int exit_status;			/* exit_status */
			struct list_elem elem;		/* Stored in a static list*/
		};

		/*	A struct to track the parent - child relationship
			between processes.
		*/
		struct process_parent_child
		{
			struct thread *parent;		/* Parent thread */
			pid_t child_pid;			/* Child pid */
			bool is_blocking_parent;	/* True if parent is blocked, waiting on this child */
			bool is_parent_alive;		/* False if parent exits before child */
			struct list_elem elem;		/* Stored in a static list */
		};

	In Syscall.c
		/* Struct to track open files including the file
		   pointer, fd, and file_name. A list of these structs is 
		   kept on the thread struct.
		*/
		struct open_file 
		{
			int fd;
			struct file *file;
			char *file_name;
			struct list_elem elem;		/*Stored in a list per thread */
		};

		static struct list process_exit_records;		/* A static list of all struct process_exit_records */
		static struct lock process_exit_records_lock;	/* A lock to protect that static list */

		static struct list process_children;			/* A static list of all struct process_children */
		static struct lock process_children_lock;		/* A lock to protect that static list */

		static struct lock open_files_lock;				/* A lock to protect filesys operations and the thread open_files list */

	In Thread.h
		struct thread {
			...
			struct list open_files;             /* List of open files and fd's. */
			int next_fd;                        /* Stores next fd to id open file */
			...
		}


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

B2:
	File descriptors are unique within a single process.  0 and 1 are
	reserved for I/O so each process is initialized with a variable
	tracking the next available fd that can be used within a file open
	operation for that process. If two threads concurrently start and
	open their first file, each will assign an fd of 2, though the open
	files are different.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
