		           +--------------------------+
				   |         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

Jon Ator
Brandon Fisher
Miles McLenon

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

A1:
	No data structures were added for argument passing.  arguments
	were temporarily placed on the heap before copying into userprogs
	stack.

---- ALGORITHMS ----

A2:
	Argument passing was implemented within the load function called
	shortly after the beginning of a new user process.  First, a helper
	function tokenizes the arguments passed to the program.  This function
	counts the number of arguments by looking at the number of single and
	multi space sections of the string.  Then it allocates space on the 
	heap for char * and char ** that temporarily store all of the arguments.
	The load function then continues and near its end, an additional 
	helper function copies the arguments over from the heap into the new
	userprogs stack in the appropriate order.  
	
	To ensure correct order on the stack, the arguments are placed on the heap 
	in the order they are received, and then iterated in reverse order to be 
	placed on te userprogs stack.  To avoid overflowing the stack above user 
	memory and into kernel memory, we decrement esp by the necessary size prior 
	to copying memory onto the stack.  If there are so many arguments that
	overflow occurs beyond the stack space and into bss, the kernel handles
	stack overflow.

---- RATIONALE ----

A3:
	To follow C programming convention, the '_r' extention to 'strtok'
	indicates that it is a reentrant function. This implementation of
	'strtok' in is necessary in Pintos due to the possibility of an
	interrupt occuring. The reentrant version of 'strtok' requires the
	caller to include a 2-d pointer to keep track of the current
	location in the source string as strtok() is repeatedly called.
	A reentrant implementation of 'strtok' stores iteration state on
	each thread instead of the kernel, thus allowing for safe thread
	scheduling and system interrupts.

A4:
	Advantage 1:
		If the shell is able to do the command separation, then it could
		parse a command as an expression. This allows the user of a UNIX
		shell to generate command arguments from the output of other commands.

	Advantage 2:
		In addition, a shell could use strings from configuration files
		or environment variables instead of the command line exclusively.
		This could save a UNIX shell user excess typing (alias commands)
		among other conveniences.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

B1:
	In Syscall.h
		/*	A struct to keep track of the exit status for a child 
			process that has exited that may have a living parent
			waiting on it.
		*/
		struct process_exit_record
		{
			pid_t child_pid;			/* Child pid */
			int exit_status;			/* exit_status */
			struct list_elem elem;		/* Stored in a static list*/
		};

		/*	A struct to track the parent - child relationship
			between processes.
		*/
		struct process_parent_child
		{
			struct thread *parent;		/* Parent thread */
			pid_t child_pid;			/* Child pid */
			bool is_blocking_parent;	/* True if parent is blocked, waiting on this child */
			bool is_parent_alive;		/* False if parent exits before child */
			struct list_elem elem;		/* Stored in a static list */
		};

	In Syscall.c
		/* Struct to track open files including the file
		   pointer, fd, and file_name. A list of these structs is 
		   kept on the thread struct.
		*/
		struct open_file 
		{
			int fd;
			struct file *file;
			char *file_name;
			struct list_elem elem;		/*Stored in a list per thread */
		};

		static struct list process_exit_records;		/* A static list of all struct process_exit_records */
		static struct lock process_exit_records_lock;	/* A lock to protect that static list */

		static struct list process_children;			/* A static list of all struct process_children */
		static struct lock process_children_lock;		/* A lock to protect that static list */

		static struct lock open_files_lock;				/* A lock to protect filesys operations and the thread open_files list */

	In Thread.h
		struct thread {
			...
			struct list open_files;             /* List of open files and fd's. */
			int next_fd;                        /* Stores next fd to id open file */
			...
		}

B2:
	File descriptors are unique within a single process.  0 and 1 are
	reserved for I/O so each process is initialized with a variable
	tracking the next available fd that can be used within a file open
	operation for that process. If two threads concurrently start and
	open their first file, each will assign an fd of 2, though the open
	files are different.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

B3:

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

B4:

B5:
	The system call "wait" returns result of process_wait() in process.c
	Handling wait functionality and the interaction with termination 
	inside of process_wait allows for consistent behavior whether the 
	waiting thread is a user program or the kernel 'main' thread.

	Inside process_wait(), we first check for an existing struct
	process_parent_child.  This is the official record of relationship
	between parent and child.  If it can't be found, return -1.  Assuming
	it is found, we check for a process_exit_record from the child
	process.  If the child hasn't exited yet, we adjust a flag, telling
	the child that it should awaken the parent on exiting and block the 
	parent thread.

	When the parent returns from the thread_block, the child will 
	have exited so we get the appropriate process_exit_record.
	Then remove both the parent_child relationship record and
	child exit record before returning the child's exit status.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

B6:

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

B7:
	///////////////////////
	THIS MAY NOT BE CORRECT:
	/////////////////////// 
	We ensure this by using thread_create to generate the -1 error
	code. With this implementation, an error return value from
	thread_create would indicate a failure to start a separate thread
	thus ensuring atomicity of failure in an invalid environment.

B8:
	To ensure proper synchronization between P wait and C exit calls
	we setup structs to track the process_parent_child (PPC) relationships 
	and the process_exit_record (PER) of child process.  We also have flags 
	within the process_parent_child that allow the child to track whether
	the parent is still alive and whether it is currently blocked
	waiting on the child.

	Case: P calls wait(C) before C exits
		Find PPC.  Since C has no PER we set PPC flag that the child is 
		blocking the parent to true. Block the parent.
		
		On C exit:
			Enter the exit_as_child() function to deal with parents.
			Find PPC, since parent is still alive add a new exit 
			record PER and since P is blocked by C, unblock(P)

	Case: P calls wait(C) after C exits
		Find PPC.  Since C has already exited, find PER.
		Store the PER exit status for later return and remove
		the PPC and PER records.

	Case: P exits without waiting, before or after C exits
		Enter the exit_as_parent() function to deal with all
		of P's children records.
		Iterate for any PPC that has P as parent.  For each
		record found:
		if C has exited:
			remove the corresponding PPC and PER records
		if C has not exited:
			Set PPC flag that says parent is no longer alive.
			This gives responsibility for cleaning up the record
			to the child when it eventually exits.

	The most important special case we ran into was the need 
	to place our functionality within the process_wait and 
	process_execute functions so that when the main thread 
	launches a user program, our structures are initialized
	just as the would be if a user program made a system call
	to exec.  This allows the main thread to process_wait() on
	the primary user program and exit appropriately.


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

B9:

B10:
	An advantage of our design for file descriptors is that each
	thread maintains a list of files and file descriptors that
	it depends on. This makes working with file descriptors
	intuitive for Pintos developers, and efficient for the thread
	accessing them. However a possible disadvantage
	is in the scenario where multiple processes have the same
	file opened. Since each thread is unaware of other threads'
	open files, additional overhead is required to maintain
	synchronization as files are opened and closed. Locks are
	held on a file irrespective of another process's lack of
	dependency on that file.

B11:
	We maintained the tid_t & pid_t identity mapping. We saw these
	types as a good way to maintain semantic separation of the identity
	of a thread and a process.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

The project took a long time, but it was a very effective learning tool.
It is especially effective if outside solutions are not referenced.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
